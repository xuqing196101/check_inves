<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bss.dao.ppms.ProjectDetailMapper">
  <resultMap id="BaseResultMap" type="bss.model.ppms.ProjectDetail">
    <id column="ID"  property="id" />
    <result column="SERIAL_NUMBER"  property="serialNumber" />
    <result column="DEPARTMENT"  property="department" />
    <result column="GOODS_NAME"  property="goodsName" />
    <result column="STAND"  property="stand" />
    <result column="QUALIT_STAND"  property="qualitStand" />
    <result column="ITEM"  property="item" />
    <result column="PURCHASE_COUNT"  property="purchaseCount" />
    <result column="PRICE"  property="price" />
    <result column="BUDGET"  property="budget" />
    <result column="DELIVER_DATE"  property="deliverDate" />
    <result column="PURCHASE_TYPE"  property="purchaseType" />
    <result column="SUPPLIER"  property="supplier" />
    <result column="IS_FREE_TAX"  property="isFreeTax" />
    <result column="GOODS_USE"  property="goodsUse" />
    <result column="USE_UNIT"  property="useUnit" />
    <result column="TASK_ID"  property="taskId" />
    <result column="BRAND"  property="brand" />
    <result column="MEMO"  property="memo" />
    <result column="PARENT_ID"  property="parentId" />
    <result column="CREATED_AT"  property="createdAt" jdbcType="TIMESTAMP"/>
    <result column="STATUS"  property="status" />
    <result column="UPDATED_AT"  property="updateAt" jdbcType="TIMESTAMP"/>
    <result column="POSITION"  property="position" />
    <result column="REQUIRED_ID"  property="requiredId" />
    <result column="PACKAGE_ID"  property="packageId" />
    <association property="project" column="PROJECT_ID" select="bss.dao.ppms.ProjectMapper.selectProjectByPrimaryKey"/>
    <association property="purchaseDep" column="PURCHASE_ID" select="ses.dao.oms.PurchaseDepMapper.selectPurchaseById"/>
    <association property="packages" column="PACKAGE_ID" select="bss.dao.ppms.PackageMapper.findPackageByCondition"/>
  </resultMap>
  <sql id="Base_Column_List">
    ID, SERIAL_NUMBER, DEPARTMENT, GOODS_NAME, STAND, QUALIT_STAND, ITEM, PURCHASE_COUNT, 
    PRICE, BUDGET, DELIVER_DATE, PURCHASE_TYPE, SUPPLIER, IS_FREE_TAX, GOODS_USE, USE_UNIT, 
    PROJECT_ID, TASK_ID, PURCHASE_ID,PACKAGE_ID,BRAND,MEMO,PARENT_ID,CREATED_AT,UPDATED_AT,
    STATUS,POSITION,REQUIRED_ID
  </sql>
     <select id="selectByCondition" parameterType="java.util.Map" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from T_BSS_PPMS_PROJECTS_DETAIL t
    where 1=1 and t.PACKAGE_ID is not null and t.price is not null 
    <if test="projectId != null and projectId !=''">
        AND PROJECT_ID = #{projectId}
    </if> 
    <if test="packageId != null and packageId !=''">
        AND PACKAGE_ID = #{packageId}
     </if> 
    <if test="purchaseType != null and purchaseType !=''">
        AND PURCHASE_TYPE = #{purchaseType}
     </if> 
     ORDER BY POSITION ASC
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from T_BSS_PPMS_PROJECTS_DETAIL
    where ID = #{id,jdbcType=VARCHAR}
  </select>
  
  <select id="selectById" parameterType="java.util.Map" resultMap="BaseResultMap" flushCache="true">
    select 
    <include refid="Base_Column_List" />
    from T_BSS_PPMS_PROJECTS_DETAIL
    where 1=1 
    <if test="ids != null and ids !=''">
        AND ID = #{ids}
    </if> 
    <if test="id != null and id !=''">
        AND PROJECT_ID = #{id}
    </if> 
    <if test="packageId != null and packageId !=''">
        AND PACKAGE_ID = #{packageId}
     </if>
     <if test="taskId != null and taskId !=''">
        AND TASK_ID = #{taskId}
     </if>
     <if test="supplier != null and supplier !=''">
        AND SUPPLIER = #{supplier}
     </if>
     <if test="requiredId != null and requiredId !=''">
        AND REQUIRED_ID = #{requiredId}
     </if>
     ORDER BY POSITION ASC
  </select>
  
  <!-- 根据多个项目id查询明细 -->
  <select id="selectByProjectIds" parameterType="java.util.Map" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from T_BSS_PPMS_PROJECTS_DETAIL
    where PROJECT_ID in
    <foreach item="item" index="index" collection="idArray" open="(" separator="," close=")">
    	#{item}
    </foreach>
  </select>
  
  <select id="listByAll" parameterType="bss.model.ppms.ProjectDetail" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from T_BSS_PPMS_PROJECTS_DETAIL
    where 1=1
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from T_BSS_PPMS_PROJECTS_DETAIL
    where ID = #{id,jdbcType=VARCHAR}
  </delete>
  
  <delete id="deleteByMap" parameterType="java.util.Map">
    delete from T_BSS_PPMS_PROJECTS_DETAIL
    where PROJECT_ID = #{projectId,jdbcType=VARCHAR} and REQUIRED_ID = #{requiredId,jdbcType=VARCHAR}
  </delete>
  
  <insert id="insert" parameterType="bss.model.ppms.ProjectDetail">
    insert into T_BSS_PPMS_PROJECTS_DETAIL (ID, SERIAL_NUMBER, DEPARTMENT, 
      GOODS_NAME, STAND, QUALIT_STAND, 
      ITEM, PURCHASE_COUNT, PRICE, 
      BUDGET, DELIVER_DATE, PURCHASE_TYPE, 
      SUPPLIER, IS_FREE_TAX, GOODS_USE, 
      USE_UNIT, PROJECT_ID, TASK_ID, 
      PURCHASE_ID)
    values (#{id,jdbcType=VARCHAR}, #{serialNumber,jdbcType=VARCHAR}, #{department,jdbcType=VARCHAR}, 
      #{goodsName,jdbcType=VARCHAR}, #{stand,jdbcType=VARCHAR}, #{qualitStand,jdbcType=VARCHAR}, 
      #{item,jdbcType=VARCHAR}, #{purchaseCount,jdbcType=DECIMAL}, #{price,jdbcType=DECIMAL}, 
      #{budget,jdbcType=DECIMAL}, #{deliverDate,jdbcType=VARCHAR}, #{purchaseType,jdbcType=VARCHAR}, 
      #{supplier,jdbcType=VARCHAR}, #{isFreeTax,jdbcType=VARCHAR}, #{goodsUse,jdbcType=VARCHAR}, 
      #{useUnit,jdbcType=VARCHAR}, #{projectId,jdbcType=VARCHAR}, #{taskId,jdbcType=VARCHAR}, 
      #{purchaseId,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="bss.model.ppms.ProjectDetail">
   <selectKey keyProperty="id" resultType="String" order="BEFORE">
        select sys_guid() from dual
    </selectKey> 
    insert into T_BSS_PPMS_PROJECTS_DETAIL
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="serialNumber != null">
        SERIAL_NUMBER,
      </if>
      <if test="department != null">
        DEPARTMENT,
      </if>
      <if test="goodsName != null">
        GOODS_NAME,
      </if>
      <if test="stand != null">
        STAND,
      </if>
      <if test="qualitStand != null">
        QUALIT_STAND,
      </if>
      <if test="item != null">
        ITEM,
      </if>
      <if test="purchaseCount != null">
        PURCHASE_COUNT,
      </if>
      <if test="price != null">
        PRICE,
      </if>
      <if test="budget != null">
        BUDGET,
      </if>
      <if test="deliverDate != null">
        DELIVER_DATE,
      </if>
      <if test="purchaseType != null">
        PURCHASE_TYPE,
      </if>
      <if test="supplier != null">
        SUPPLIER,
      </if>
      <if test="isFreeTax != null">
        IS_FREE_TAX,
      </if>
      <if test="goodsUse != null">
        GOODS_USE,
      </if>
      <if test="useUnit != null">
        USE_UNIT,
      </if>
      <if test="project != null">
        PROJECT_ID,
      </if>
      <if test="taskId != null">
        TASK_ID,
      </if>
      <if test="purchaseDep != null">
        PURCHASE_ID,
      </if>
      <if test="packageId != null">
        PACKAGE_ID,
      </if>
      <if test="brand != null">
        BRAND,
      </if>
      <if test="memo != null">
        MEMO,
      </if>
      <if test="parentId != null">
        PARENT_ID,
      </if>
      <if test="createdAt != null">
        CREATED_AT,
      </if>
      <if test="status != null">
        STATUS,
      </if>
      <if test="updateAt != null">
        UPDATED_AT,
      </if>
      <if test="position != null">
        POSITION,
      </if>
       <if test="requiredId != null">
        REQUIRED_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id},
      </if>
      <if test="serialNumber != null">
        #{serialNumber},
      </if>
      <if test="department != null">
        #{department},
      </if>
      <if test="goodsName != null">
        #{goodsName},
      </if>
      <if test="stand != null">
        #{stand},
      </if>
      <if test="qualitStand != null">
        #{qualitStand},
      </if>
      <if test="item != null">
        #{item},
      </if>
      <if test="purchaseCount != null">
        #{purchaseCount},
      </if>
      <if test="price != null">
        #{price},
      </if>
      <if test="budget != null">
        #{budget},
      </if>
      <if test="deliverDate != null">
        #{deliverDate},
      </if>
      <if test="purchaseType != null">
        #{purchaseType},
      </if>
      <if test="supplier != null">
        #{supplier},
      </if>
      <if test="isFreeTax != null">
        #{isFreeTax},
      </if>
      <if test="goodsUse != null">
        #{goodsUse},
      </if>
      <if test="useUnit != null">
        #{useUnit},
      </if>
      <if test="project != null">
        #{project.id},
      </if>
      <if test="taskId != null">
        #{taskId},
      </if>
      <if test="purchaseDep != null">
        #{purchaseDep.id},
      </if>
      <if test="packageId != null">
        #{packageId},
      </if>
      <if test="brand != null">
        #{brand},
      </if>
      <if test="memo != null">
        #{memo},
      </if>
      <if test="parentId != null">
        #{parentId},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updateAt != null">
        #{updateAt,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status},
      </if>
      <if test="position != null">
        #{position},
      </if>
      <if test="requiredId != null">
        #{requiredId},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="bss.model.ppms.ProjectDetail">
    update T_BSS_PPMS_PROJECTS_DETAIL
    <set>
      <if test="serialNumber != null">
        SERIAL_NUMBER = #{serialNumber},
      </if>
      <if test="department != null">
        DEPARTMENT = #{department},
      </if>
      <if test="goodsName != null">
        GOODS_NAME = #{goodsName},
      </if>
      <if test="stand != null">
        STAND = #{stand},
      </if>
      <if test="qualitStand != null">
        QUALIT_STAND = #{qualitStand},
      </if>
      <if test="item != null">
        ITEM = #{item},
      </if>
      <if test="purchaseCount != null">
        PURCHASE_COUNT = #{purchaseCount},
      </if>
      <if test="price != null">
        PRICE = #{price},
      </if>
      <if test="budget != null">
        BUDGET = #{budget},
      </if>
      <if test="deliverDate != null">
        DELIVER_DATE = #{deliverDate},
      </if>
      <if test="purchaseType != null">
        PURCHASE_TYPE = #{purchaseType},
      </if>
      <if test="supplier != null">
        SUPPLIER = #{supplier},
      </if>
      <if test="isFreeTax != null">
        IS_FREE_TAX = #{isFreeTax},
      </if>
      <if test="goodsUse != null">
        GOODS_USE = #{goodsUse},
      </if>
      <if test="useUnit != null">
        USE_UNIT = #{useUnit},
      </if>
      <if test="project != null">
        PROJECT_ID = #{project.id},
      </if>
      <if test="taskId != null">
        TASK_ID = #{taskId},
      </if>
      <if test="purchaseDep != null">
        PURCHASE_ID = #{purchaseDep.id},
      </if>
      <if test="packageId != null">
        PACKAGE_ID = #{packageId},
      </if>
      <if test="brand != null">
        BRAND = #{brand},
      </if>
      <if test="memo != null">
        MEMO = #{memo},
      </if>
      <if test="parentId != null">
        PARENT_ID = #{parentId},
      </if>
      <if test="createdAt != null">
        CREATED_AT = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updateAt != null">
        UPDATED_AT = #{updateAt,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        STATUS = #{status},
      </if>
      <if test="requiredId != null">
        REQUIRED_ID = #{requiredId},
      </if>
      <if test="position != null">
        POSITION = #{position},
      </if>
    </set>
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="bss.model.ppms.ProjectDetail">
    update T_BSS_PPMS_PROJECTS_DETAIL
    set SERIAL_NUMBER = #{serialNumber,jdbcType=VARCHAR},
      DEPARTMENT = #{department,jdbcType=VARCHAR},
      GOODS_NAME = #{goodsName,jdbcType=VARCHAR},
      STAND = #{stand,jdbcType=VARCHAR},
      QUALIT_STAND = #{qualitStand,jdbcType=VARCHAR},
      ITEM = #{item,jdbcType=VARCHAR},
      PURCHASE_COUNT = #{purchaseCount,jdbcType=DECIMAL},
      PRICE = #{price,jdbcType=DECIMAL},
      BUDGET = #{budget,jdbcType=DECIMAL},
      DELIVER_DATE = #{deliverDate,jdbcType=DATE},
      PURCHASE_TYPE = #{purchaseType,jdbcType=VARCHAR},
      SUPPLIER = #{supplier,jdbcType=VARCHAR},
      IS_FREE_TAX = #{isFreeTax,jdbcType=VARCHAR},
      GOODS_USE = #{goodsUse,jdbcType=VARCHAR},
      USE_UNIT = #{useUnit,jdbcType=VARCHAR},
      PROJECT_ID = #{projectId,jdbcType=VARCHAR},
      TASK_ID = #{taskId,jdbcType=VARCHAR},
      PURCHASE_ID = #{purchaseId,jdbcType=VARCHAR}
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  	<select id="selectByParentId"  resultMap="BaseResultMap" flushCache="true">
  		SELECT
				*
			FROM
				(select * from T_BSS_PPMS_PROJECTS_DETAIL where PROJECT_ID = #{projectId})
			START WITH REQUIRED_ID = #{id} CONNECT BY PRIOR REQUIRED_ID = PARENT_ID
    </select>
    <select id="selectByParent"  resultMap="BaseResultMap" flushCache="true">
      SELECT
				*
			FROM
				(select * from T_BSS_PPMS_PROJECTS_DETAIL where PROJECT_ID = #{projectId})
			START WITH REQUIRED_ID = #{id} CONNECT BY PRIOR PARENT_ID = REQUIRED_ID 
    </select>
    <select id="selectParentIdByPackageId" parameterType="java.lang.Object" resultType="bss.model.ppms.ProjectDetail">
    	SELECT
				DISTINCT PARENT_ID
			FROM
				T_BSS_PPMS_PROJECTS_DETAIL
			WHERE PACKAGE_ID = #{packageId}
    </select>
    <select id="selectByPackageId" parameterType="java.lang.Object" resultMap="BaseResultMap">
    	SELECT
				<include refid="Base_Column_List" />
			FROM
				T_BSS_PPMS_PROJECTS_DETAIL
			WHERE PACKAGE_ID = #{packageId} order by POSITION
    </select>
    <select id="selectNotEmptyPackageOfDetail" parameterType="java.lang.Object" resultMap="BaseResultMap">
    	SELECT
				*
			FROM
				T_BSS_PPMS_PROJECTS_DETAIL
			WHERE
				1=1
			AND PROJECT_ID = #{projectId}
    </select>
    <select id="findHavePackageIdDetail" parameterType="java.util.Map" resultMap="BaseResultMap">
    	SELECT * FROM(
				SELECT
						*
					FROM
						(
							SELECT
								*
							FROM
								T_BSS_PPMS_PROJECTS_DETAIL
							WHERE
								PROJECT_ID = #{projectId}
						) START WITH REQUIRED_ID = #{id} CONNECT BY PRIOR REQUIRED_ID = PARENT_ID
				) WHERE PACKAGE_ID = #{packageId}
    </select>
    <select id="findNoPackageIdDetail" parameterType="java.util.Map" resultMap="BaseResultMap">
    	SELECT * FROM(
				SELECT
						*
					FROM
						(
							SELECT
								*
							FROM
								T_BSS_PPMS_PROJECTS_DETAIL
							WHERE
								PROJECT_ID = #{projectId}
						) START WITH REQUIRED_ID = #{id} CONNECT BY PRIOR REQUIRED_ID = PARENT_ID
				) WHERE PACKAGE_ID IS NULL
				AND PURCHASE_COUNT IS NOT NULL
    </select>
    
    <!-- 获取最大的排序 -->
    <select id="getmax" parameterType="java.lang.Object" resultType="bss.model.ppms.ProjectDetail">
        select max(POSITION) as POSITION
         from T_BSS_PPMS_PROJECTS_DETAIL
         where PROJECT_ID = #{projectId}
    </select>
    
    
    <select id="selectByRequiredId" parameterType="java.util.Map" resultMap="BaseResultMap">
       SELECT 
       <include refid="Base_Column_List" />
       from 
        T_BSS_PPMS_PROJECTS_DETAIL
        where  PROJECT_ID = #{projectId,jdbcType=VARCHAR}
    </select>
    
    <select id="selectByParentIds"  resultMap="BaseResultMap">
      SELECT
      <include refid="Base_Column_List" />
       FROM T_BSS_PPMS_PROJECTS_DETAIL
        start with REQUIRED_ID = #{id} 
        connect by prior REQUIRED_ID = PARENT_ID 
  </select>
    
    <delete id="deleteByProject" parameterType="java.lang.String">
    delete from T_BSS_PPMS_PROJECTS_DETAIL
    where PROJECT_ID = #{id,jdbcType=VARCHAR}
  </delete>
  
  
  <select id="selectByParentIdTree"  resultMap="BaseResultMap">
        select * from T_BSS_PPMS_PROJECTS_DETAIL
        start with REQUIRED_ID = #{requiredId} 
        connect by prior REQUIRED_ID = PARENT_ID ORDER BY CREATED_AT 
    </select>
  
  
  
  <select id="getByPidAndRid"  resultMap="BaseResultMap">
        select * from T_BSS_PPMS_PROJECTS_DETAIL
        where  PROJECT_ID = #{pid} and REQUIRED_ID = #{rid} 
    </select>
    
    <select id="selectByDemand" parameterType="java.util.Map" resultMap="BaseResultMap">
        SELECT
				  p.PROJECT_ID,p.DEPARTMENT
				FROM
				  T_BSS_PPMS_PROJECTS_DETAIL p
				WHERE p.DEPARTMENT IN (
				  SELECT
				    o. NAME
				  FROM
				    T_SES_OMS_ORG o
				  LEFT JOIN T_SES_BMS_USER u ON o.ID = u.ORG_ID
				  WHERE
				    u.ID = #{id}
				) 
    </select>
    <select id="selectByPackageRecursively" parameterType="java.lang.String" resultMap="BaseResultMap">
      select * from T_BSS_PPMS_PROJECTS_DETAIL 
         START with PACKAGE_ID=#{packageId} 
         CONNECT by PRIOR PARENT_ID=REQUIRED_ID
    </select>
    
    <select id="selectByRequiredIdTree"  parameterType="java.lang.String" resultMap="BaseResultMap">
        select * from T_BSS_PPMS_PROJECTS_DETAIL
        start with REQUIRED_ID = #{requiredId} 
        connect by prior PARENT_ID = REQUIRED_ID ORDER BY CREATED_AT 
    </select>
    
    <!-- 获取最底层明细 -->
    <select id="selectByDetailRequired"  parameterType="java.lang.String" resultMap="BaseResultMap">
    	SELECT
				*
			FROM
				(
					SELECT
						detail.*,
						DECODE (
							(
								SELECT
									COUNT (*)
								FROM
									T_BSS_PPMS_PROJECTS_DETAIL
								WHERE
									PARENT_ID = detail.REQUIRED_ID
							),
							0,
							'false',
							'true'
						) AS isParent
					FROM
						T_BSS_PPMS_PROJECTS_DETAIL detail
					WHERE
						detail.PROJECT_ID = #{projectId} 
				)
			WHERE
				isParent = 'false'
    </select>
    
    <!-- 根据项目ID递归查询明细 (父节点)-->
    <select id="selectByParentList"  parameterType="java.util.Map" resultMap="BaseResultMap">
    	<!-- SELECT
				*
			FROM
				(
					SELECT 
					  detail. ID, detail.PARENT_ID, detail.REQUIRED_ID, detail.SERIAL_NUMBER, detail.DEPARTMENT, detail.GOODS_NAME,
						detail.STAND, detail.QUALIT_STAND, detail.ITEM, detail.PURCHASE_COUNT, detail.PRICE, detail.BUDGET, detail.DELIVER_DATE,
						detail.PURCHASE_TYPE, detail.SUPPLIER, detail.IS_FREE_TAX, detail.GOODS_USE, detail.USE_UNIT, detail.PROJECT_ID,
						detail.PACKAGE_ID, detail.BRAND, detail.MEMO, detail.POSITION,
						DECODE (
							(
								SELECT COUNT (*) FROM T_BSS_PPMS_PROJECTS_DETAIL WHERE PARENT_ID = detail.REQUIRED_ID AND PROJECT_ID = #{projectId}
							),
							0,
							'false',
							DECODE (
								(
									SELECT COUNT (*) FROM
										(
											SELECT * FROM T_BSS_PPMS_PROJECTS_DETAIL WHERE PROJECT_ID = #{projectId} AND PACKAGE_ID IS NULL
										) START WITH REQUIRED_ID = detail.REQUIRED_ID CONNECT BY PRIOR REQUIRED_ID = PARENT_ID
								),
								1,
								'false',
								0,
								'false',
								'true'
							)
						) AS cou,
						DECODE (
							(
								SELECT
									COUNT (*)
								FROM
									(
										SELECT * FROM T_BSS_PPMS_PROJECTS_DETAIL WHERE PROJECT_ID = #{projectId}
									) START WITH REQUIRED_ID = detail.REQUIRED_ID CONNECT BY PRIOR REQUIRED_ID = PARENT_ID
							),
							1,
							'false',
							'true'
						) AS cou1
					FROM
						T_BSS_PPMS_PROJECTS_DETAIL detail
					WHERE
						detail.PROJECT_ID = #{projectId}
					AND detail.package_id IS NULL
				) tab
			WHERE
				(
					TAB.COU = 'false'
					AND TAB.cou1 = 'false'
				)
			OR (
				TAB.COU = 'true'
				AND TAB.cou1 = 'true'
			)
			OR (
				TAB.COU = 'true'
				AND TAB.cou1 = 'false'
			)
			ORDER BY
				TAB.POSITION ASC -->
				SELECT
				tab.*
			FROM
				(
				SELECT
				detail. ID,
				detail.PARENT_ID,
				detail.REQUIRED_ID,
				detail.SERIAL_NUMBER,
				detail.DEPARTMENT,
				detail.GOODS_NAME,
				detail.STAND,
				detail.QUALIT_STAND,
				detail.ITEM,
				detail.PURCHASE_COUNT,
				detail.PRICE,
				detail.BUDGET,
				detail.DELIVER_DATE,
				detail.PURCHASE_TYPE,
				detail.SUPPLIER,
				detail.IS_FREE_TAX,
				detail.GOODS_USE,
				detail.USE_UNIT,
				detail.PROJECT_ID,
				detail.PACKAGE_ID,
				detail.BRAND,
				detail.MEMO,
				detail.POSITION,
				DECODE (
					(
						SELECT
							COUNT (*)
						FROM
							T_BSS_PPMS_PROJECTS_DETAIL
						WHERE
							PARENT_ID = detail.REQUIRED_ID
					),
					0,
					'false',
					'true'
				) AS isParent,
			  project_detail(detail.REQUIRED_ID,#{projectId}) as cou2
			FROM
				T_BSS_PPMS_PROJECTS_DETAIL detail
			WHERE
				detail.PROJECT_ID = #{projectId}
			AND detail.package_id IS NULL ) tab
			where (tab.isParent='false' and cou2='false') or (tab.isParent='true' and cou2='true') or (tab.isParent='false' and cou2='true')
			 order by TAB.POSITION ASC
			 
    </select>
    
    <select id="selectByProjectIdAndPackageId" parameterType="java.util.Map" resultMap="BaseResultMap">
			SELECT DISTINCT
				ID, PARENT_ID, REQUIRED_ID, SERIAL_NUMBER, DEPARTMENT,
				GOODS_NAME,
				STAND, QUALIT_STAND, ITEM, PURCHASE_COUNT, PRICE, BUDGET, DELIVER_DATE,
				PURCHASE_TYPE, SUPPLIER, IS_FREE_TAX, GOODS_USE, USE_UNIT, PROJECT_ID,
				PACKAGE_ID, BRAND, MEMO, POSITION
			FROM
				(
					SELECT * FROM T_BSS_PPMS_PROJECTS_DETAIL WHERE PROJECT_ID = #{projectId}
				) START WITH PACKAGE_ID =#{packageId} CONNECT BY PRIOR PARENT_ID =REQUIRED_ID 
			ORDER BY POSITION
		</select>
		
		<!-- 获取最底层明细 -->
    <select id="selectByDetailPackNull"  parameterType="java.lang.String" resultMap="BaseResultMap">
    	SELECT
				*
			FROM
				(
					SELECT
						detail.*,
						DECODE (
							(
								SELECT
									COUNT (*)
								FROM
									T_BSS_PPMS_PROJECTS_DETAIL
								WHERE
									PARENT_ID = detail.REQUIRED_ID
							),
							0,
							'false',
							'true'
						) AS isParent
					FROM
						T_BSS_PPMS_PROJECTS_DETAIL detail
					WHERE
						detail.PROJECT_ID = #{projectId} 
				)
			WHERE
				isParent = 'false' AND PACKAGE_ID IS NULL
    </select>
    
    <select id="selectDetailByProjectId"  parameterType="java.lang.String" resultMap="BaseResultMap">
				SELECT
					detail.*,
					DECODE (
						(
							SELECT
								COUNT (*)
							FROM
								T_BSS_PPMS_PROJECTS_DETAIL
							WHERE
								PARENT_ID = detail.REQUIRED_ID
						),
						0,
						'false',
						'true'
					) AS isParent
				FROM
					T_BSS_PPMS_PROJECTS_DETAIL detail
				WHERE
					detail.PROJECT_ID = #{projectId} 
    </select>
    
    <update id="updateByPackNull" parameterType="java.util.Map">
    	update T_BSS_PPMS_PROJECTS_DETAIL
    	SET	PACKAGE_ID = NULL, PROJECT_ID = #{projectId}
    	WHERE ID = #{id}
    </update>
    
    <update id="updateByPackId" parameterType="java.util.Map">
    	UPDATE T_BSS_PPMS_PROJECTS_DETAIL
			SET PACKAGE_ID = #{packageId},
			 UPDATED_AT = SYSDATE
			WHERE
				ID IN (SELECT
				id
			FROM
				(
					SELECT
						detail.*,
						DECODE (
							(
								SELECT
									COUNT (*)
								FROM
									T_BSS_PPMS_PROJECTS_DETAIL
								WHERE
									PARENT_ID = detail.REQUIRED_ID
							),
							0,
							'false',
							'true'
						) AS isParent
					FROM
						T_BSS_PPMS_PROJECTS_DETAIL detail
					WHERE
						detail.PROJECT_ID = #{projectId} AND
						detail.REQUIRED_ID IN (SELECT REQUIRED_ID FROM T_BSS_PPMS_PROJECTS_DETAIL WHERE ID IN
						<foreach item="item" index="index" collection="requiredId" open="(" separator="," close=")">
				    	#{item}
				    </foreach>
						)
				)
			WHERE
				isParent = 'false')
    </update>
</mapper>